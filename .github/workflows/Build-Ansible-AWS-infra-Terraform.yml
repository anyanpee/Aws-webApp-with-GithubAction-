name: Deploy AWS Infra with Terraform & Ansible

on:
  push:
    branches:
      - main
    paths:
      - 'Terraform/'          # Make sure this matches your actual directory
  workflow_dispatch:            # Enables "Run workflow" button in GitHub UI

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: my-app
  TF_WORK_DIR: Terraform
  TRIGGER: apply

jobs:
  deploy:
    name: Terraform + Docker + Ansible Deployment
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.6.0

    - name: Terraform Init
      run: terraform -chdir=$TF_WORK_DIR init

    - name: Terraform Plan
      run: terraform -chdir=$TF_WORK_DIR plan

    - name: Terraform Apply
      run: terraform -chdir=$TF_WORK_DIR apply -auto-approve

    - name: Extract EC2 IP for SSH
      id: get_ip
      run: |
        # pull a single value, silently; fall back if -raw is blocked by "sensitive"
        IP=$(terraform -chdir=$TF_WORK_DIR output bastion_public_ip | tr -d '"'
        CLEAN_IP=$(echo "$IP" | grep -oE '[0-9.]+')
        echo "EC2_PRIVATE_IP=$CLEAN_IP" >> $GITHUB_ENV
        echo "Extracted IP = $CLEAN_IP"
       
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      run: |
       docker build -t $ECR_REPOSITORY:latest ./Monty_Hall_Game_Flask_App
       docker tag $ECR_REPOSITORY:latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

    - name: Push Docker image to ECR
      run: |
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

    - name: Show secret length (safe)
      run: echo "Key length = ${{ secrets.AWS_EC2_SSH_PRIVATE_KEY != '' && 'non-empty' || 'EMPTY' }}" 

    - name: Validate SSH Key Secret Length
      run: |
        if [ -z "${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }}" ]; then
          echo "❌ SSH private key is empty!"
          exit 1
        else
          echo "✅ SSH private key is set and loaded."
        fi

    - name: Debug SSH Connection Only
      if: env.TRIGGER == 'apply'
      uses: appleboy/ssh-action@master
      with:
        host: 54.245.8.248
        username: ec2-user
        key: ${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }}
        script: echo "✅ SSH connection established"

